{"version":3,"sources":["../node_modules/what-input/dist/what-input.js"],"names":["factory","modules","installedModules","__webpack_require__","moduleId","exports","module","id","loaded","call","m","c","p","document","window","ask","element","ignoreKeys","registerOnChange","unRegisterOnChange","docElem","documentElement","currentElement","currentInput","currentIntent","sessionStorage","getItem","eventTimer","formInputs","functionList","ignoreMap","inputMap","keydown","keyup","mousedown","mousemove","MSPointerDown","MSPointerMove","pointerdown","pointermove","touchstart","isBuffering","isScrolling","mousePos","x","y","pointerMap","2","3","4","supportsPassive","opts","Object","defineProperty","get","addEventListener","e","addListeners","options","passive","PointerEvent","setInput","setIntent","MSPointerEvent","eventBuffer","detectWheel","setElement","clearElement","event","eventKey","which","value","type","pointerType","shouldUpdate","indexOf","setItem","doUpdate","activeElem","activeElement","nodeName","toLowerCase","setAttribute","fireFunctions","detectScrolling","target","classList","length","toString","replace","removeAttribute","clearTimeout","setTimeout","createElement","undefined","onmousewheel","i","len","fn","screenX","screenY","Array","prototype","opt","arr","eventType","push","position","match","objPos","splice"],"mappings":"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","file":"static/js/1.874b96ad.chunk.js","sourcesContent":["/**\n * what-input - A global utility for tracking the current input method (mouse, keyboard or touch).\n * @version v5.1.0\n * @link https://github.com/ten1seven/what-input\n * @license MIT\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"whatInput\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"whatInput\"] = factory();\n\telse\n\t\troot[\"whatInput\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\n\tmodule.exports = function () {\n\t  /*\n\t   * bail out if there is no document or window\n\t   * (i.e. in a node/non-DOM environment)\n\t   *\n\t   * Return a stubbed API instead\n\t   */\n\t  if (typeof document === 'undefined' || typeof window === 'undefined') {\n\t    return {\n\t      // always return \"initial\" because no interaction will ever be detected\n\t      ask: function ask() {\n\t        return 'initial';\n\t      },\n\n\t      // always return null\n\t      element: function element() {\n\t        return null;\n\t      },\n\n\t      // no-op\n\t      ignoreKeys: function ignoreKeys() {},\n\n\t      // no-op\n\t      registerOnChange: function registerOnChange() {},\n\n\t      // no-op\n\t      unRegisterOnChange: function unRegisterOnChange() {}\n\t    };\n\t  }\n\n\t  /*\n\t   * variables\n\t   */\n\n\t  // cache document.documentElement\n\t  var docElem = document.documentElement;\n\n\t  // currently focused dom element\n\t  var currentElement = null;\n\n\t  // last used input type\n\t  var currentInput = 'initial';\n\n\t  // last used input intent\n\t  var currentIntent = currentInput;\n\n\t  // check for sessionStorage support\n\t  // then check for session variables and use if available\n\t  if (window.sessionStorage) {\n\t    if (window.sessionStorage.getItem('what-input')) {\n\t      currentInput = window.sessionStorage.getItem('what-input');\n\t    }\n\n\t    if (window.sessionStorage.getItem('what-intent')) {\n\t      currentIntent = window.sessionStorage.getItem('what-intent');\n\t    }\n\t  }\n\n\t  // event buffer timer\n\t  var eventTimer = null;\n\n\t  // form input types\n\t  var formInputs = ['input', 'select', 'textarea'];\n\n\t  // empty array for holding callback functions\n\t  var functionList = [];\n\n\t  // list of modifier keys commonly used with the mouse and\n\t  // can be safely ignored to prevent false keyboard detection\n\t  var ignoreMap = [16, // shift\n\t  17, // control\n\t  18, // alt\n\t  91, // Windows key / left Apple cmd\n\t  93 // Windows menu / right Apple cmd\n\t  ];\n\n\t  // mapping of events to input types\n\t  var inputMap = {\n\t    keydown: 'keyboard',\n\t    keyup: 'keyboard',\n\t    mousedown: 'mouse',\n\t    mousemove: 'mouse',\n\t    MSPointerDown: 'pointer',\n\t    MSPointerMove: 'pointer',\n\t    pointerdown: 'pointer',\n\t    pointermove: 'pointer',\n\t    touchstart: 'touch'\n\n\t    // boolean: true if touch buffer is active\n\t  };var isBuffering = false;\n\n\t  // boolean: true if the page is being scrolled\n\t  var isScrolling = false;\n\n\t  // store current mouse position\n\t  var mousePos = {\n\t    x: null,\n\t    y: null\n\n\t    // map of IE 10 pointer events\n\t  };var pointerMap = {\n\t    2: 'touch',\n\t    3: 'touch', // treat pen like touch\n\t    4: 'mouse'\n\n\t    // check support for passive event listeners\n\t  };var supportsPassive = false;\n\n\t  try {\n\t    var opts = Object.defineProperty({}, 'passive', {\n\t      get: function get() {\n\t        supportsPassive = true;\n\t      }\n\t    });\n\n\t    window.addEventListener('test', null, opts);\n\t  } catch (e) {}\n\n\t  /*\n\t   * set up\n\t   */\n\n\t  var setUp = function setUp() {\n\t    // add correct mouse wheel event mapping to `inputMap`\n\t    inputMap[detectWheel()] = 'mouse';\n\n\t    addListeners();\n\t    doUpdate('input');\n\t    doUpdate('intent');\n\t  };\n\n\t  /*\n\t   * events\n\t   */\n\n\t  var addListeners = function addListeners() {\n\t    // `pointermove`, `MSPointerMove`, `mousemove` and mouse wheel event binding\n\t    // can only demonstrate potential, but not actual, interaction\n\t    // and are treated separately\n\t    var options = supportsPassive ? { passive: true } : false;\n\n\t    // pointer events (mouse, pen, touch)\n\t    if (window.PointerEvent) {\n\t      window.addEventListener('pointerdown', setInput);\n\t      window.addEventListener('pointermove', setIntent);\n\t    } else if (window.MSPointerEvent) {\n\t      window.addEventListener('MSPointerDown', setInput);\n\t      window.addEventListener('MSPointerMove', setIntent);\n\t    } else {\n\t      // mouse events\n\t      window.addEventListener('mousedown', setInput);\n\t      window.addEventListener('mousemove', setIntent);\n\n\t      // touch events\n\t      if ('ontouchstart' in window) {\n\t        window.addEventListener('touchstart', eventBuffer, options);\n\t        window.addEventListener('touchend', setInput);\n\t      }\n\t    }\n\n\t    // mouse wheel\n\t    window.addEventListener(detectWheel(), setIntent, options);\n\n\t    // keyboard events\n\t    window.addEventListener('keydown', eventBuffer);\n\t    window.addEventListener('keyup', eventBuffer);\n\n\t    // focus events\n\t    window.addEventListener('focusin', setElement);\n\t    window.addEventListener('focusout', clearElement);\n\t  };\n\n\t  // checks conditions before updating new input\n\t  var setInput = function setInput(event) {\n\t    // only execute if the event buffer timer isn't running\n\t    if (!isBuffering) {\n\t      var eventKey = event.which;\n\t      var value = inputMap[event.type];\n\n\t      if (value === 'pointer') {\n\t        value = pointerType(event);\n\t      }\n\n\t      var shouldUpdate = value === 'keyboard' && eventKey && ignoreMap.indexOf(eventKey) === -1 || value === 'mouse' || value === 'touch';\n\n\t      if (currentInput !== value && shouldUpdate) {\n\t        currentInput = value;\n\n\t        if (window.sessionStorage) {\n\t          window.sessionStorage.setItem('what-input', currentInput);\n\t        }\n\n\t        doUpdate('input');\n\t      }\n\n\t      if (currentIntent !== value && shouldUpdate) {\n\t        // preserve intent for keyboard typing in form fields\n\t        var activeElem = document.activeElement;\n\t        var notFormInput = activeElem && activeElem.nodeName && formInputs.indexOf(activeElem.nodeName.toLowerCase()) === -1;\n\n\t        if (notFormInput) {\n\t          currentIntent = value;\n\n\t          if (window.sessionStorage) {\n\t            window.sessionStorage.setItem('what-intent', currentIntent);\n\t          }\n\n\t          doUpdate('intent');\n\t        }\n\t      }\n\t    }\n\t  };\n\n\t  // updates the doc and `inputTypes` array with new input\n\t  var doUpdate = function doUpdate(which) {\n\t    docElem.setAttribute('data-what' + which, which === 'input' ? currentInput : currentIntent);\n\n\t    fireFunctions(which);\n\t  };\n\n\t  // updates input intent for `mousemove` and `pointermove`\n\t  var setIntent = function setIntent(event) {\n\t    // test to see if `mousemove` happened relative to the screen to detect scrolling versus mousemove\n\t    detectScrolling(event);\n\n\t    // only execute if the event buffer timer isn't running\n\t    // or scrolling isn't happening\n\t    if (!isBuffering && !isScrolling) {\n\t      var value = inputMap[event.type];\n\t      if (value === 'pointer') {\n\t        value = pointerType(event);\n\t      }\n\n\t      if (currentIntent !== value) {\n\t        currentIntent = value;\n\n\t        if (window.sessionStorage) {\n\t          window.sessionStorage.setItem('what-intent', currentIntent);\n\t        }\n\n\t        doUpdate('intent');\n\t      }\n\t    }\n\t  };\n\n\t  var setElement = function setElement(event) {\n\t    if (!event.target.nodeName) {\n\t      // If nodeName is undefined, clear the element\n\t      // This can happen if click inside an <svg> element.\n\t      clearElement();\n\t      return;\n\t    }\n\n\t    currentElement = event.target.nodeName.toLowerCase();\n\t    docElem.setAttribute('data-whatelement', currentElement);\n\n\t    if (event.target.classList && event.target.classList.length) {\n\t      docElem.setAttribute('data-whatclasses', event.target.classList.toString().replace(' ', ','));\n\t    }\n\t  };\n\n\t  var clearElement = function clearElement() {\n\t    currentElement = null;\n\n\t    docElem.removeAttribute('data-whatelement');\n\t    docElem.removeAttribute('data-whatclasses');\n\t  };\n\n\t  // buffers events that frequently also fire mouse events\n\t  var eventBuffer = function eventBuffer(event) {\n\t    // set the current input\n\t    setInput(event);\n\n\t    // clear the timer if it happens to be running\n\t    window.clearTimeout(eventTimer);\n\n\t    // set the isBuffering to `true`\n\t    isBuffering = true;\n\n\t    // run the timer\n\t    eventTimer = window.setTimeout(function () {\n\t      // if the timer runs out, set isBuffering back to `false`\n\t      isBuffering = false;\n\t    }, 100);\n\t  };\n\n\t  /*\n\t   * utilities\n\t   */\n\n\t  var pointerType = function pointerType(event) {\n\t    if (typeof event.pointerType === 'number') {\n\t      return pointerMap[event.pointerType];\n\t    } else {\n\t      // treat pen like touch\n\t      return event.pointerType === 'pen' ? 'touch' : event.pointerType;\n\t    }\n\t  };\n\n\t  // detect version of mouse wheel event to use\n\t  // via https://developer.mozilla.org/en-US/docs/Web/Events/wheel\n\t  var detectWheel = function detectWheel() {\n\t    var wheelType = void 0;\n\n\t    // Modern browsers support \"wheel\"\n\t    if ('onwheel' in document.createElement('div')) {\n\t      wheelType = 'wheel';\n\t    } else {\n\t      // Webkit and IE support at least \"mousewheel\"\n\t      // or assume that remaining browsers are older Firefox\n\t      wheelType = document.onmousewheel !== undefined ? 'mousewheel' : 'DOMMouseScroll';\n\t    }\n\n\t    return wheelType;\n\t  };\n\n\t  // runs callback functions\n\t  var fireFunctions = function fireFunctions(type) {\n\t    for (var i = 0, len = functionList.length; i < len; i++) {\n\t      if (functionList[i].type === type) {\n\t        functionList[i].fn.call(undefined, type === 'input' ? currentInput : currentIntent);\n\t      }\n\t    }\n\t  };\n\n\t  // finds matching element in an object\n\t  var objPos = function objPos(match) {\n\t    for (var i = 0, len = functionList.length; i < len; i++) {\n\t      if (functionList[i].fn === match) {\n\t        return i;\n\t      }\n\t    }\n\t  };\n\n\t  var detectScrolling = function detectScrolling(event) {\n\t    if (mousePos['x'] !== event.screenX || mousePos['y'] !== event.screenY) {\n\t      isScrolling = false;\n\n\t      mousePos['x'] = event.screenX;\n\t      mousePos['y'] = event.screenY;\n\t    } else {\n\t      isScrolling = true;\n\t    }\n\t  };\n\n\t  /*\n\t   * init\n\t   */\n\n\t  // don't start script unless browser cuts the mustard\n\t  // (also passes if polyfills are used)\n\t  if ('addEventListener' in window && Array.prototype.indexOf) {\n\t    setUp();\n\t  }\n\n\t  /*\n\t   * api\n\t   */\n\n\t  return {\n\t    // returns string: the current input type\n\t    // opt: 'intent'|'input'\n\t    // 'input' (default): returns the same value as the `data-whatinput` attribute\n\t    // 'intent': includes `data-whatintent` value if it's different than `data-whatinput`\n\t    ask: function ask(opt) {\n\t      return opt === 'intent' ? currentIntent : currentInput;\n\t    },\n\n\t    // returns string: the currently focused element or null\n\t    element: function element() {\n\t      return currentElement;\n\t    },\n\n\t    // overwrites ignored keys with provided array\n\t    ignoreKeys: function ignoreKeys(arr) {\n\t      ignoreMap = arr;\n\t    },\n\n\t    // attach functions to input and intent \"events\"\n\t    // funct: function to fire on change\n\t    // eventType: 'input'|'intent'\n\t    registerOnChange: function registerOnChange(fn, eventType) {\n\t      functionList.push({\n\t        fn: fn,\n\t        type: eventType || 'input'\n\t      });\n\t    },\n\n\t    unRegisterOnChange: function unRegisterOnChange(fn) {\n\t      var position = objPos(fn);\n\n\t      if (position || position === 0) {\n\t        functionList.splice(position, 1);\n\t      }\n\t    }\n\t  };\n\t}();\n\n/***/ })\n/******/ ])\n});\n;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/what-input/dist/what-input.js\n// module id = 572\n// module chunks = 1"],"sourceRoot":""}